#pragma version 8
intcblock 0 1 8 4096
bytecblock 0x6465636c617265645f636f756e74 0x426f7841
txn NumAppArgs
intc_0 // 0
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0xe377bfd5 // "add_int(uint64)uint64[]"
==
bnz main_l5
txna ApplicationArgs 0
pushbytes 0x3ff8fbae // "box_create_test()void"
==
bnz main_l4
err
main_l4:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
callsub boxcreatetest_4
intc_1 // 1
return
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
callsub addint_2
store 2
pushbytes 0x151f7c75 // 0x151f7c75
load 2
concat
log
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l8
err
main_l8:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_1
intc_1 // 1
return

// max
max_0:
store 1
store 0
load 0
load 1
>
bnz max_0_l2
load 1
b max_0_l3
max_0_l2:
load 0
max_0_l3:
retsub

// create
create_1:
intc_1 // 1
return

// add_int
addint_2:
store 3
bytec_1 // "BoxA"
box_get
store 5
store 4
bytec_0 // "declared_count"
app_global_get
intc_0 // 0
==
bnz addint_2_l2
load 3
load 4
intc_0 // 0
bytec_0 // "declared_count"
app_global_get
callsub binarysearch_3
b addint_2_l3
addint_2_l2:
intc_0 // 0
addint_2_l3:
intc_2 // 8
*
store 6
bytec_0 // "declared_count"
bytec_0 // "declared_count"
app_global_get
intc_1 // 1
+
app_global_put
bytec_1 // "BoxA"
load 4
intc_0 // 0
load 6
extract3
load 3
itob
concat
load 4
load 6
intc_3 // 4096
load 6
-
intc_2 // 8
-
extract3
concat
box_put
global OpcodeBudget
itob
log
pushint 10 // 10
itob
extract 6 0
bytec_1 // "BoxA"
intc_0 // 0
intc_2 // 8
pushint 10 // 10
*
box_extract
concat
retsub

// binary_search
binarysearch_3:
store 10
store 9
store 8
store 7
// in bin
load 9
load 10
>
bnz binarysearch_3_l11
// start<=end
load 9
load 10
==
bnz binarysearch_3_l7
// start!=end
load 9
load 10
+
pushint 2 // 2
/
store 11
load 8
load 11
intc_2 // 8
*
extract_uint64
store 12
// gotvals
load 12
load 7
<
bnz binarysearch_3_l6
load 12
load 7
>
bnz binarysearch_3_l5
// midval=val
load 11
b binarysearch_3_l12
binarysearch_3_l5:
// midval>val
load 7
load 8
load 9
intc_1 // 1
load 11
callsub max_0
intc_1 // 1
-
load 7
load 8
load 9
load 10
load 11
load 12
uncover 9
uncover 9
uncover 9
uncover 9
callsub binarysearch_3
cover 6
store 12
store 11
store 10
store 9
store 8
store 7
b binarysearch_3_l12
binarysearch_3_l6:
// midval<val
load 7
load 8
load 11
intc_1 // 1
+
load 10
load 7
load 8
load 9
load 10
load 11
load 12
uncover 9
uncover 9
uncover 9
uncover 9
callsub binarysearch_3
cover 6
store 12
store 11
store 10
store 9
store 8
store 7
b binarysearch_3_l12
binarysearch_3_l7:
load 9
load 8
load 9
intc_2 // 8
*
extract_uint64
load 7
>
bnz binarysearch_3_l10
intc_1 // 1
binarysearch_3_l9:
+
retsub
binarysearch_3_l10:
intc_0 // 0
b binarysearch_3_l9
binarysearch_3_l11:
load 9
retsub
binarysearch_3_l12:
retsub

// box_create_test
boxcreatetest_4:
bytec_1 // "BoxA"
intc_3 // 4096
box_create
assert
bytec_0 // "declared_count"
intc_0 // 0
app_global_put
retsub