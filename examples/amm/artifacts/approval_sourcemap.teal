// GENERATED TEAL                                                  //    PYTEAL PATH               LINE    PYTEAL HYBRID UNPARSED
#pragma version 7                                                  //    examples/amm/amm_test.py  98      ConstantProductAMM()
intcblock 0 1 1000 4 10000000000                                   //
bytecblock 0x61 0x62 0x70 0x67 0x72                                //
txn NumAppArgs                                                     //
intc_0 // 0                                                        //
==                                                                 //
bnz main_l12                                                       //
txna ApplicationArgs 0                                             //
pushbytes 0x08a956f7 // "set_governor(account)void"                //
==                                                                 //
bnz main_l11                                                       //
txna ApplicationArgs 0                                             //
pushbytes 0x6b59d965 // "bootstrap(pay,asset,asset)uint64"         //
==                                                                 //
bnz main_l10                                                       //
txna ApplicationArgs 0                                             //
pushbytes 0x5cbf1e2d // "mint(axfer,axfer,asset,asset,asset)void"  //
==                                                                 //
bnz main_l9                                                        //
txna ApplicationArgs 0                                             //
pushbytes 0x1436c2ac // "burn(axfer,asset,asset,asset)void"        //
==                                                                 //
bnz main_l8                                                        //
txna ApplicationArgs 0                                             //
pushbytes 0x4a88e055 // "swap(axfer,asset,asset)void"              //
==                                                                 //
bnz main_l7                                                        //
err                                                                //
main_l7:                                                           //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
!=                                                                 //
&&                                                                 //
assert                                                             //
txna ApplicationArgs 1                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 23                                                           //
txna ApplicationArgs 2                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 24                                                           //
txn GroupIndex                                                     //
intc_1 // 1                                                        //
-                                                                  //
store 22                                                           //
load 22                                                            //
gtxns TypeEnum                                                     //
intc_3 // axfer                                                    //
==                                                                 //
assert                                                             //
load 22                                                            //
load 23                                                            //
load 24                                                            //
callsub swap_7                                                     //
intc_1 // 1                                                        //
return                                                             //
main_l8:                                                           //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
!=                                                                 //
&&                                                                 //
assert                                                             //
txna ApplicationArgs 1                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 19                                                           //
txna ApplicationArgs 2                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 20                                                           //
txna ApplicationArgs 3                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 21                                                           //
txn GroupIndex                                                     //
intc_1 // 1                                                        //
-                                                                  //
store 18                                                           //
load 18                                                            //
gtxns TypeEnum                                                     //
intc_3 // axfer                                                    //
==                                                                 //
assert                                                             //
load 18                                                            //
load 19                                                            //
load 20                                                            //
load 21                                                            //
callsub burn_6                                                     //
intc_1 // 1                                                        //
return                                                             //
main_l9:                                                           //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
!=                                                                 //
&&                                                                 //
assert                                                             //
txna ApplicationArgs 1                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 15                                                           //
txna ApplicationArgs 2                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 16                                                           //
txna ApplicationArgs 3                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 17                                                           //
txn GroupIndex                                                     //
pushint 2 // 2                                                     //
-                                                                  //
store 13                                                           //
load 13                                                            //
gtxns TypeEnum                                                     //
intc_3 // axfer                                                    //
==                                                                 //
assert                                                             //
txn GroupIndex                                                     //
intc_1 // 1                                                        //
-                                                                  //
store 14                                                           //
load 14                                                            //
gtxns TypeEnum                                                     //
intc_3 // axfer                                                    //
==                                                                 //
assert                                                             //
load 13                                                            //
load 14                                                            //
load 15                                                            //
load 16                                                            //
load 17                                                            //
callsub mint_5                                                     //
intc_1 // 1                                                        //
return                                                             //
main_l10:                                                          //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
!=                                                                 //
&&                                                                 //
assert                                                             //
txna ApplicationArgs 1                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 1                                                            //
txna ApplicationArgs 2                                             //
intc_0 // 0                                                        //
getbyte                                                            //
store 2                                                            //
txn GroupIndex                                                     //
intc_1 // 1                                                        //
-                                                                  //
store 0                                                            //
load 0                                                             //
gtxns TypeEnum                                                     //
intc_1 // pay                                                      //
==                                                                 //
assert                                                             //
load 0                                                             //
load 1                                                             //
load 2                                                             //
callsub bootstrap_4                                                //
store 3                                                            //
pushbytes 0x151f7c75 // 0x151f7c75                                 //
load 3                                                             //
itob                                                               //
concat                                                             //
log                                                                //
intc_1 // 1                                                        //
return                                                             //
main_l11:                                                          //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
!=                                                                 //
&&                                                                 //
assert                                                             //
txna ApplicationArgs 1                                             //
intc_0 // 0                                                        //
getbyte                                                            //
callsub setgovernor_3                                              //
intc_1 // 1                                                        //
return                                                             //
main_l12:                                                          //
txn OnCompletion                                                   //
intc_0 // NoOp                                                     //
==                                                                 //
bnz main_l14                                                       //
err                                                                //
main_l14:                                                          //
txn ApplicationID                                                  //
intc_0 // 0                                                        //
==                                                                 //
assert                                                             //
callsub create_0                                                   //
intc_1 // 1                                                        //
return                                                             //
                                                                   //
// create
create_0:
bytec_3 // "g"                                                     //    examples/amm/amm.py       66      Bytes('g')
global CreatorAddress                                              //                              67      Global.creator_address()
app_global_put                                                     //                              116     self.initialize_application_state()
bytec 4 // "r"                                                     //                              90      Bytes('r')
intc_0 // 0                                                        //                              116     self.initialize_application_state()
app_global_put                                                     //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// auth_only
authonly_1:
bytec_3 // "g"                                                     //    examples/amm/amm.py       66      Bytes('g')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       120     def set_governor(self, new_governor: abi.Account):
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// auth_only
authonly_2:
bytec_3 // "g"                                                     //    examples/amm/amm.py       66      Bytes('g')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       126     def bootstrap(
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// set_governor
setgovernor_3:
store 25                                                           //
txn Sender                                                         //
callsub authonly_1                                                 //
// unauthorized                                                    //
assert                                                             //
bytec_3 // "g"                                                     //    examples/amm/amm.py       66      Bytes('g')
load 25                                                            //                              122     new_governor.address()
txnas Accounts                                                     //
app_global_put                                                     //                                      self.governor.set(new_governor.address())
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// bootstrap
bootstrap_4:
store 6                                                            //
store 5                                                            //
store 4                                                            //
txn Sender                                                         //
callsub authonly_2                                                 //
// unauthorized                                                    //
assert                                                             //
global GroupSize                                                   //    examples/amm/amm.py       149     Global.group_size()
pushint 2 // 2                                                     //                                      Int(2)
==                                                                 //                                      Global.group_size() == Int(2)
// group size not 2                                                //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 4                                                             //                              151     seed.get()
gtxns Receiver                                                     //                                      seed.get().receiver()
global CurrentApplicationAddress                                   //                              28      from beaker import (
==                                                                 //                              151     seed.get().receiver() == self.address
// receiver not app address                                        //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 4                                                             //                              155     seed.get()
gtxns Amount                                                       //                                      seed.get().amount()
pushint 300000 // 300000                                           //                                      consts.Algos(0.3)
>=                                                                 //                                      seed.get().amount() >= consts.Algos(0.3)
// amount minimum not met                                          //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 5                                                             //                              159     a_asset.asset_id()
txnas Assets                                                       //
load 6                                                             //                                      b_asset.asset_id()
txnas Assets                                                       //
<                                                                  //                                      a_asset.asset_id() < b_asset.asset_id()
// asset a or asset b incorrect                                    //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
intc_0 // 0                                                        //                              166     self.asset_a.set(a_asset.asset_id())
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get_ex                                                  //                              166     self.asset_a.set(a_asset.asset_id())
store 8                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 7                                                            //
load 8                                                             //    examples/amm/amm.py       166     self.asset_a.set(a_asset.asset_id())
!                                                                  //
assert                                                             //
bytec_0 // "a"                                                     //                              72      Bytes('a')
load 5                                                             //                              166     a_asset.asset_id()
txnas Assets                                                       //
app_global_put                                                     //                                      self.asset_a.set(a_asset.asset_id())
intc_0 // 0                                                        //                              167     self.asset_b.set(b_asset.asset_id())
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get_ex                                                  //                              167     self.asset_b.set(b_asset.asset_id())
store 10                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 9                                                            //
load 10                                                            //    examples/amm/amm.py       167     self.asset_b.set(b_asset.asset_id())
!                                                                  //
assert                                                             //
bytec_1 // "b"                                                     //                              78      Bytes('b')
load 6                                                             //                              167     b_asset.asset_id()
txnas Assets                                                       //
app_global_put                                                     //                                      self.asset_b.set(b_asset.asset_id())
intc_0 // 0                                                        //                              168     self.pool_token.set(self.do_create_pool_token(self.asset_a, self.asset_b))
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get_ex                                                  //                              168     self.pool_token.set(self.do_create_pool_token(self.asset_a, self.asset_b))
store 12                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 11                                                           //
load 12                                                            //    examples/amm/amm.py       168     self.pool_token.set(self.do_create_pool_token(self.asset_a, self.asset_b))
!                                                                  //
assert                                                             //
bytec_2 // "p"                                                     //                              84      Bytes('p')
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
bytec_1 // "b"                                                     //    examples/amm/amm.py       78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
callsub docreatepooltoken_14                                       //    examples/amm/amm.py       169     self.do_create_pool_token(self.asset_a, self.asset_b)
app_global_put                                                     //                              168     self.pool_token.set(self.do_create_pool_token(self.asset_a, self.asset_b))
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
callsub dooptin_13                                                 //    examples/amm/amm.py       174     self.do_opt_in(self.asset_a)
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
callsub dooptin_13                                                 //    examples/amm/amm.py       175     self.do_opt_in(self.asset_b)
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
retsub                                                             //
                                                                   //
// mint
mint_5:
store 39                                                           //
store 38                                                           //
store 37                                                           //
store 36                                                           //
store 35                                                           //
load 38                                                            //    examples/amm/amm.py       207     a_asset.asset_id()
txnas Assets                                                       //
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       207     a_asset.asset_id() == self.asset_a
// asset a incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 39                                                            //                              211     b_asset.asset_id()
txnas Assets                                                       //
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       211     b_asset.asset_id() == self.asset_b
// asset b incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 37                                                            //                              215     pool_asset.asset_id()
txnas Assets                                                       //
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       215     pool_asset.asset_id() == self.pool_token
// asset pool incorrect                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 35                                                            //                              222     a_xfer.get()
gtxns AssetReceiver                                                //                                      a_xfer.get().asset_receiver()
global CurrentApplicationAddress                                   //                              28      from beaker import (
==                                                                 //                              222     a_xfer.get().asset_receiver() == self.address
// receiver not app address                                        //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 35                                                            //                              226     a_xfer.get()
gtxns XferAsset                                                    //                                      a_xfer.get().xfer_asset()
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       226     a_xfer.get().xfer_asset() == self.asset_a
// asset a incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 35                                                            //                              230     a_xfer.get()
gtxns AssetAmount                                                  //                                      a_xfer.get().asset_amount()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      a_xfer.get().asset_amount() > Int(0)
// amount minimum not met                                          //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 35                                                            //                              234     a_xfer.get()
gtxns Sender                                                       //                                      a_xfer.get().sender()
txn Sender                                                         //                                      Txn.sender()
==                                                                 //                                      a_xfer.get().sender() == Txn.sender()
// invalid sender                                                  //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 36                                                            //                              241     b_xfer.get()
gtxns AssetReceiver                                                //                                      b_xfer.get().asset_receiver()
global CurrentApplicationAddress                                   //                              28      from beaker import (
==                                                                 //                              241     b_xfer.get().asset_receiver() == self.address
// receiver not app address                                        //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 36                                                            //                              245     b_xfer.get()
gtxns XferAsset                                                    //                                      b_xfer.get().xfer_asset()
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       245     b_xfer.get().xfer_asset() == self.asset_b
// asset b incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 36                                                            //                              249     b_xfer.get()
gtxns AssetAmount                                                  //                                      b_xfer.get().asset_amount()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      b_xfer.get().asset_amount() > Int(0)
// amount minimum not met                                          //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 36                                                            //                              253     b_xfer.get()
gtxns Sender                                                       //                                      b_xfer.get().sender()
txn Sender                                                         //                                      Txn.sender()
==                                                                 //                                      b_xfer.get().sender() == Txn.sender()
// invalid sender                                                  //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
global CurrentApplicationAddress                                   //                              28      from beaker import (
load 37                                                            //                              264     pool_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      pool_asset.holding(self.address).balance()
store 41                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 40                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
load 38                                                            //                              265     a_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      a_asset.holding(self.address).balance()
store 43                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 42                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
load 39                                                            //                              266     b_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      b_asset.holding(self.address).balance()
store 45                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 44                                                           //
load 41                                                            //    examples/amm/amm.py       268     pool_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 43                                                            //    examples/amm/amm.py       269     a_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 45                                                            //    examples/amm/amm.py       270     b_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 42                                                            //    examples/amm/amm.py       276     a_bal.value()
load 35                                                            //                                      a_xfer.get()
gtxns AssetAmount                                                  //                                      a_xfer.get().asset_amount()
==                                                                 //                                      a_bal.value() == a_xfer.get().asset_amount()
load 44                                                            //                              277     b_bal.value()
load 36                                                            //                                      b_xfer.get()
gtxns AssetAmount                                                  //                                      b_xfer.get().asset_amount()
==                                                                 //                                      b_bal.value() == b_xfer.get().asset_amount()
&&                                                                 //                              275     And(a_bal.value() == a_xfer.get().asset_amount(), b_bal.value() == b_xfer.get().asset_amount())
bnz mint_5_l2                                                      //    examples/amm/amm_test.py  98      ConstantProductAMM()
intc 4 // 10000000000                                              //    examples/amm/amm.py       100     Int(_total_supply)
load 40                                                            //                              286     pool_bal.value()
-                                                                  //                                      self.total_supply - pool_bal.value()
load 42                                                            //                              287     a_bal.value()
load 35                                                            //                                      a_xfer.get()
gtxns AssetAmount                                                  //                                      a_xfer.get().asset_amount()
-                                                                  //                                      a_bal.value() - a_xfer.get().asset_amount()
load 44                                                            //                              288     b_bal.value()
load 36                                                            //                                      b_xfer.get()
gtxns AssetAmount                                                  //                                      b_xfer.get().asset_amount()
-                                                                  //                                      b_bal.value() - b_xfer.get().asset_amount()
load 35                                                            //                              289     a_xfer.get()
gtxns AssetAmount                                                  //                                      a_xfer.get().asset_amount()
load 36                                                            //                              290     b_xfer.get()
gtxns AssetAmount                                                  //                                      b_xfer.get().asset_amount()
callsub tokenstomint_8                                             //                              285     self.tokens_to_mint(self.total_supply - pool_bal.value(), a_bal.value() - a_xfer.get().asset_amount(), b_bal.value() - b_xfer.get().asset_amount(), a_xfer.get().asset_amount(), b_xfer.get().asset_amount())
b mint_5_l3                                                        //    examples/amm/amm_test.py  98      ConstantProductAMM()
mint_5_l2:                                                         //
load 35                                                            //    examples/amm/amm.py       282     a_xfer.get()
gtxns AssetAmount                                                  //                                      a_xfer.get().asset_amount()
load 36                                                            //                                      b_xfer.get()
gtxns AssetAmount                                                  //                                      b_xfer.get().asset_amount()
callsub tokenstomintinitial_9                                      //                              281     self.tokens_to_mint_initial(a_xfer.get().asset_amount(), b_xfer.get().asset_amount())
mint_5_l3:                                                         //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 46                                                           //    examples/amm/amm.py       273     (to_mint := ScratchVar()).store(If(And(a_bal.value() == a_xfer.get().asset_amount(), b_bal.value() == b_xfer.get().asset_amount()), self.tokens_to_mint_initial(a_xfer.get().asset_amount(), b_xfer.get().asset_amount()), self.tokens_to_mint(self.total_supply - pool_bal.value(), a_bal.value() - a_xfer.get().asset_amount(), b_bal.value() - b_xfer.get().asset_amount(), a_xfer.get().asset_amount(), b_xfer.get().asset_amount())))
load 46                                                            //                              295     to_mint.load()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      to_mint.load() > Int(0)
// outgoing amount too low                                         //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       294     Assert(to_mint.load() > Int(0), comment=ConstantProductAMMErrors.SendAmountTooLow)
txn Sender                                                         //                              299     Txn.sender()
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
load 46                                                            //    examples/amm/amm.py       299     to_mint.load()
callsub doaxfer_12                                                 //                                      self.do_axfer(Txn.sender(), self.pool_token, to_mint.load())
bytec 4 // "r"                                                     //                              90      Bytes('r')
callsub computeratio_15                                            //                              300     self.compute_ratio()
app_global_put                                                     //                                      self.ratio.set(self.compute_ratio())
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// burn
burn_6:
store 61                                                           //
store 60                                                           //
store 59                                                           //
store 58                                                           //
load 59                                                            //    examples/amm/amm.py       322     pool_asset.asset_id()
txnas Assets                                                       //
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       322     pool_asset.asset_id() == self.pool_token
// asset pool incorrect                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 60                                                            //                              326     a_asset.asset_id()
txnas Assets                                                       //
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       326     a_asset.asset_id() == self.asset_a
// asset a incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 61                                                            //                              330     b_asset.asset_id()
txnas Assets                                                       //
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       330     b_asset.asset_id() == self.asset_b
// asset b incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 58                                                            //                              337     pool_xfer.get()
gtxns AssetReceiver                                                //                                      pool_xfer.get().asset_receiver()
global CurrentApplicationAddress                                   //                              28      from beaker import (
==                                                                 //                              337     pool_xfer.get().asset_receiver() == self.address
// receiver not app address                                        //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 58                                                            //                              341     pool_xfer.get()
gtxns AssetAmount                                                  //                                      pool_xfer.get().asset_amount()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      pool_xfer.get().asset_amount() > Int(0)
// amount minimum not met                                          //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 58                                                            //                              345     pool_xfer.get()
gtxns XferAsset                                                    //                                      pool_xfer.get().xfer_asset()
bytec_2 // "p"                                                     //                              84      Bytes('p')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       345     pool_xfer.get().xfer_asset() == self.pool_token
// asset pool incorrect                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 58                                                            //                              349     pool_xfer.get()
gtxns Sender                                                       //                                      pool_xfer.get().sender()
txn Sender                                                         //                                      Txn.sender()
==                                                                 //                                      pool_xfer.get().sender() == Txn.sender()
// invalid sender                                                  //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
global CurrentApplicationAddress                                   //                              28      from beaker import (
load 59                                                            //                              356     pool_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      pool_asset.holding(self.address).balance()
store 63                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 62                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
load 60                                                            //                              357     a_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      a_asset.holding(self.address).balance()
store 65                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 64                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
load 61                                                            //                              358     b_asset.holding(self.address)
asset_holding_get AssetBalance                                     //                                      b_asset.holding(self.address).balance()
store 67                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 66                                                           //
load 63                                                            //    examples/amm/amm.py       360     pool_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 65                                                            //    examples/amm/amm.py       361     a_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 67                                                            //    examples/amm/amm.py       362     b_bal.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
intc 4 // 10000000000                                              //    examples/amm/amm.py       100     Int(_total_supply)
load 62                                                            //                              367     pool_bal.value()
load 58                                                            //                                      pool_xfer.get()
gtxns AssetAmount                                                  //                                      pool_xfer.get().asset_amount()
-                                                                  //                                      pool_bal.value() - pool_xfer.get().asset_amount()
-                                                                  //                                      self.total_supply - (pool_bal.value() - pool_xfer.get().asset_amount())
store 68                                                           //                              366     (issued := ScratchVar()).store(self.total_supply - (pool_bal.value() - pool_xfer.get().asset_amount()))
load 68                                                            //                              371     issued.load()
load 64                                                            //                              372     a_bal.value()
load 58                                                            //                              373     pool_xfer.get()
gtxns AssetAmount                                                  //                                      pool_xfer.get().asset_amount()
callsub tokenstoburn_10                                            //                              370     self.tokens_to_burn(issued.load(), a_bal.value(), pool_xfer.get().asset_amount())
store 69                                                           //                              369     (a_amt := ScratchVar()).store(self.tokens_to_burn(issued.load(), a_bal.value(), pool_xfer.get().asset_amount()))
load 68                                                            //                              378     issued.load()
load 66                                                            //                              379     b_bal.value()
load 58                                                            //                              380     pool_xfer.get()
gtxns AssetAmount                                                  //                                      pool_xfer.get().asset_amount()
callsub tokenstoburn_10                                            //                              377     self.tokens_to_burn(issued.load(), b_bal.value(), pool_xfer.get().asset_amount())
store 70                                                           //                              376     (b_amt := ScratchVar()).store(self.tokens_to_burn(issued.load(), b_bal.value(), pool_xfer.get().asset_amount()))
txn Sender                                                         //                              385     Txn.sender()
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
load 69                                                            //    examples/amm/amm.py       387     a_amt.load()
callsub doaxfer_12                                                 //                              384     self.do_axfer(Txn.sender(), self.asset_a, a_amt.load())
txn Sender                                                         //                              391     Txn.sender()
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
load 70                                                            //    examples/amm/amm.py       393     b_amt.load()
callsub doaxfer_12                                                 //                              390     self.do_axfer(Txn.sender(), self.asset_b, b_amt.load())
bytec 4 // "r"                                                     //                              90      Bytes('r')
callsub computeratio_15                                            //                              395     self.compute_ratio()
app_global_put                                                     //                                      self.ratio.set(self.compute_ratio())
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// swap
swap_7:
store 76                                                           //
store 75                                                           //
store 74                                                           //
load 75                                                            //    examples/amm/amm.py       414     a_asset.asset_id()
txnas Assets                                                       //
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       414     a_asset.asset_id() == self.asset_a
// asset a incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 76                                                            //                              418     b_asset.asset_id()
txnas Assets                                                       //
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       418     b_asset.asset_id() == self.asset_b
// asset b incorrect                                               //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 74                                                            //                              426     swap_xfer.get()
gtxns XferAsset                                                    //                                      swap_xfer.get().xfer_asset()
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       426     swap_xfer.get().xfer_asset() == self.asset_a
load 74                                                            //                              427     swap_xfer.get()
gtxns XferAsset                                                    //                                      swap_xfer.get().xfer_asset()
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       427     swap_xfer.get().xfer_asset() == self.asset_b
||                                                                 //                              425     Or(swap_xfer.get().xfer_asset() == self.asset_a, swap_xfer.get().xfer_asset() == self.asset_b)
// asset a or asset b incorrect                                    //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 74                                                            //                              432     swap_xfer.get()
gtxns AssetAmount                                                  //                                      swap_xfer.get().asset_amount()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      swap_xfer.get().asset_amount() > Int(0)
// amount minimum not met                                          //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
load 74                                                            //                              436     swap_xfer.get()
gtxns Sender                                                       //                                      swap_xfer.get().sender()
txn Sender                                                         //                                      Txn.sender()
==                                                                 //                                      swap_xfer.get().sender() == Txn.sender()
// invalid sender                                                  //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       44      Assert(cond, comment=cmt)
global CurrentApplicationAddress                                   //                              28      from beaker import (
load 74                                                            //                              446     swap_xfer.get()
gtxns XferAsset                                                    //                                      swap_xfer.get().xfer_asset()
asset_holding_get AssetBalance                                     //                              450     AssetHolding.balance(self.address, in_id)
store 78                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 77                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
load 74                                                            //                              442     swap_xfer.get()
gtxns XferAsset                                                    //                                      swap_xfer.get().xfer_asset()
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       442     swap_xfer.get().xfer_asset() == self.asset_a
bnz swap_7_l5                                                      //    examples/amm/amm_test.py  98      ConstantProductAMM()
bytec_0 // "a"                                                     //    examples/amm/amm.py       72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
swap_7_l2:                                                         //
asset_holding_get AssetBalance                                     //    examples/amm/amm.py       451     AssetHolding.balance(self.address, out_id)
store 80                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 79                                                           //
load 78                                                            //    examples/amm/amm.py       453     in_sup.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 80                                                            //    examples/amm/amm.py       454     out_sup.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 74                                                            //    examples/amm/amm.py       459     swap_xfer.get()
gtxns AssetAmount                                                  //                                      swap_xfer.get().asset_amount()
load 77                                                            //                              460     in_sup.value()
load 74                                                            //                                      swap_xfer.get()
gtxns AssetAmount                                                  //                                      swap_xfer.get().asset_amount()
-                                                                  //                                      in_sup.value() - swap_xfer.get().asset_amount()
load 79                                                            //                              461     out_sup.value()
callsub tokenstoswap_11                                            //                              458     self.tokens_to_swap(swap_xfer.get().asset_amount(), in_sup.value() - swap_xfer.get().asset_amount(), out_sup.value())
store 81                                                           //                              457     (to_swap := ScratchVar()).store(self.tokens_to_swap(swap_xfer.get().asset_amount(), in_sup.value() - swap_xfer.get().asset_amount(), out_sup.value()))
load 81                                                            //                              465     to_swap.load()
intc_0 // 0                                                        //                                      Int(0)
>                                                                  //                                      to_swap.load() > Int(0)
// outgoing amount too low                                         //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //    examples/amm/amm.py       464     Assert(to_swap.load() > Int(0), comment=ConstantProductAMMErrors.SendAmountTooLow)
txn Sender                                                         //                              469     Txn.sender()
load 74                                                            //                              442     swap_xfer.get()
gtxns XferAsset                                                    //                                      swap_xfer.get().xfer_asset()
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
==                                                                 //    examples/amm/amm.py       442     swap_xfer.get().xfer_asset() == self.asset_a
bnz swap_7_l4                                                      //    examples/amm/amm_test.py  98      ConstantProductAMM()
bytec_0 // "a"                                                     //    examples/amm/amm.py       72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
b swap_7_l6                                                        //
swap_7_l4:                                                         //
bytec_1 // "b"                                                     //    examples/amm/amm.py       78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
b swap_7_l6                                                        //
swap_7_l5:                                                         //
bytec_1 // "b"                                                     //    examples/amm/amm.py       78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
b swap_7_l2                                                        //
swap_7_l6:                                                         //
load 81                                                            //    examples/amm/amm.py       471     to_swap.load()
callsub doaxfer_12                                                 //                              468     self.do_axfer(Txn.sender(), out_id, to_swap.load())
bytec 4 // "r"                                                     //                              90      Bytes('r')
callsub computeratio_15                                            //                              473     self.compute_ratio()
app_global_put                                                     //                                      self.ratio.set(self.compute_ratio())
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// tokens_to_mint
tokenstomint_8:
store 51                                                           //
store 50                                                           //
store 49                                                           //
store 48                                                           //
store 47                                                           //
load 50                                                            //
intc_2 // 1000                                                     //    examples/amm/amm.py       104     Int(_scale)
mulw                                                               //                              497     WideRatio([a_amount, self.scale], [a_supply])
intc_0 // 0                                                        //
load 48                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
divmodw                                                            //    examples/amm/amm.py       497     WideRatio([a_amount, self.scale], [a_supply])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
store 52                                                           //                              496     (a_rat := ScratchVar()).store(WideRatio([a_amount, self.scale], [a_supply]))
load 51                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
intc_2 // 1000                                                     //    examples/amm/amm.py       104     Int(_scale)
mulw                                                               //                              500     WideRatio([b_amount, self.scale], [b_supply])
intc_0 // 0                                                        //
load 49                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
divmodw                                                            //    examples/amm/amm.py       500     WideRatio([b_amount, self.scale], [b_supply])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
store 53                                                           //                              499     (b_rat := ScratchVar()).store(WideRatio([b_amount, self.scale], [b_supply]))
load 52                                                            //                              503     a_rat.load()
load 53                                                            //                                      b_rat.load()
<                                                                  //                                      a_rat.load() < b_rat.load()
bnz tokenstomint_8_l2                                              //    examples/amm/amm_test.py  98      ConstantProductAMM()
load 53                                                            //    examples/amm/amm.py       503     b_rat.load()
b tokenstomint_8_l3                                                //    examples/amm/amm_test.py  98      ConstantProductAMM()
tokenstomint_8_l2:                                                 //
load 52                                                            //    examples/amm/amm.py       503     a_rat.load()
tokenstomint_8_l3:                                                 //    examples/amm/amm_test.py  98      ConstantProductAMM()
load 47                                                            //
mulw                                                               //    examples/amm/amm.py       502     WideRatio([If(a_rat.load() < b_rat.load(), a_rat.load(), b_rat.load()), issued], [self.scale])
intc_0 // 0                                                        //
intc_2 // 1000                                                     //                              104     Int(_scale)
divmodw                                                            //                              502     WideRatio([If(a_rat.load() < b_rat.load(), a_rat.load(), b_rat.load()), issued], [self.scale])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// tokens_to_mint_initial
tokenstomintinitial_9:
*                                                                  //    examples/amm/amm.py       510     a_amount * b_amount
sqrt                                                               //                                      Sqrt(a_amount * b_amount)
intc_2 // 1000                                                     //                              104     Int(_scale)
-                                                                  //                              510     Sqrt(a_amount * b_amount) - self.scale
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// tokens_to_burn
tokenstoburn_10:
store 73                                                           //
store 72                                                           //
store 71                                                           //
load 72                                                            //
load 73                                                            //
mulw                                                               //    examples/amm/amm.py       514     WideRatio([supply, amount], [issued])
intc_0 // 0                                                        //
load 71                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
divmodw                                                            //    examples/amm/amm.py       514     WideRatio([supply, amount], [issued])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// tokens_to_swap
tokenstoswap_11:
store 84                                                           //
store 83                                                           //
store 82                                                           //
load 82                                                            //
intc_2 // 1000                                                     //    examples/amm/amm.py       104     Int(_scale)
pushint 5 // 5                                                     //                              107     Int(_fee)
-                                                                  //                              518     self.scale - self.fee
mulw                                                               //                              519     WideRatio([in_amount, factor, out_supply], [in_supply * self.scale + in_amount * factor])
load 84                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
uncover 2                                                          //    examples/amm/amm.py       519     WideRatio([in_amount, factor, out_supply], [in_supply * self.scale + in_amount * factor])
dig 1                                                              //
*                                                                  //
cover 2                                                            //
mulw                                                               //
cover 2                                                            //
+                                                                  //
swap                                                               //
intc_0 // 0                                                        //
load 83                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
intc_2 // 1000                                                     //    examples/amm/amm.py       104     Int(_scale)
*                                                                  //                              521     in_supply * self.scale
load 82                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
intc_2 // 1000                                                     //    examples/amm/amm.py       104     Int(_scale)
pushint 5 // 5                                                     //                              107     Int(_fee)
-                                                                  //                              518     self.scale - self.fee
*                                                                  //                              521     in_amount * factor
+                                                                  //                                      in_supply * self.scale + in_amount * factor
divmodw                                                            //                              519     WideRatio([in_amount, factor, out_supply], [in_supply * self.scale + in_amount * factor])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// do_axfer
doaxfer_12:
store 29                                                           //
store 28                                                           //
store 27                                                           //
itxn_begin                                                         //    examples/amm/amm.py       530     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetTransfer, TxnField.xfer_asset: aid, TxnField.asset_amount: amt, TxnField.asset_receiver: rx, TxnField.fee: Int(0)})
intc_3 // axfer                                                    //
itxn_field TypeEnum                                                //
load 28                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
itxn_field XferAsset                                               //    examples/amm/amm.py       530     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetTransfer, TxnField.xfer_asset: aid, TxnField.asset_amount: amt, TxnField.asset_receiver: rx, TxnField.fee: Int(0)})
load 29                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
itxn_field AssetAmount                                             //    examples/amm/amm.py       530     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetTransfer, TxnField.xfer_asset: aid, TxnField.asset_amount: amt, TxnField.asset_receiver: rx, TxnField.fee: Int(0)})
load 27                                                            //    examples/amm/amm_test.py  98      ConstantProductAMM()
itxn_field AssetReceiver                                           //    examples/amm/amm.py       530     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetTransfer, TxnField.xfer_asset: aid, TxnField.asset_amount: amt, TxnField.asset_receiver: rx, TxnField.fee: Int(0)})
intc_0 // 0                                                        //                              536     Int(0)
itxn_field Fee                                                     //                              530     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetTransfer, TxnField.xfer_asset: aid, TxnField.asset_amount: amt, TxnField.asset_receiver: rx, TxnField.fee: Int(0)})
itxn_submit                                                        //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// do_opt_in
dooptin_13:
store 26                                                           //
global CurrentApplicationAddress                                   //
load 26                                                            //
intc_0 // 0                                                        //    examples/amm/amm.py       542     Int(0)
callsub doaxfer_12                                                 //                                      self.do_axfer(self.address, aid, Int(0))
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// do_create_pool_token
docreatepooltoken_14:
store 30                                                           //
asset_params_get AssetUnitName                                     //    examples/amm/amm.py       547     AssetParam.unitName(a)
store 32                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 31                                                           //
load 30                                                            //
asset_params_get AssetUnitName                                     //    examples/amm/amm.py       548     AssetParam.unitName(b)
store 34                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 33                                                           //
load 32                                                            //    examples/amm/amm.py       550     una.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 34                                                            //    examples/amm/amm.py       551     unb.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
itxn_begin                                                         //    examples/amm/amm.py       554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
pushint 3 // acfg                                                  //
itxn_field TypeEnum                                                //
pushbytes 0x4450542d // "DPT-"                                     //                              558     Bytes('DPT-')
load 31                                                            //                                      una.value()
concat                                                             //                              557     Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value())
pushbytes 0x2d // "-"                                              //                              558     Bytes('-')
concat                                                             //                              557     Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value())
load 33                                                            //                              558     unb.value()
concat                                                             //                              557     Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value())
itxn_field ConfigAssetName                                         //                              554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
pushbytes 0x647074 // "dpt"                                        //                              560     Bytes('dpt')
itxn_field ConfigAssetUnitName                                     //                              554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
intc 4 // 10000000000                                              //                              100     Int(_total_supply)
itxn_field ConfigAssetTotal                                        //                              554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
pushint 3 // 3                                                     //                              562     Int(3)
itxn_field ConfigAssetDecimals                                     //                              554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
global CurrentApplicationAddress                                   //
itxn_field ConfigAssetManager                                      //
global CurrentApplicationAddress                                   //
itxn_field ConfigAssetReserve                                      //
intc_0 // 0                                                        //                              565     Int(0)
itxn_field Fee                                                     //                              554     InnerTxnBuilder.Execute({TxnField.type_enum: TxnType.AssetConfig, TxnField.config_asset_name: Concat(Bytes('DPT-'), una.value(), Bytes('-'), unb.value()), TxnField.config_asset_unit_name: Bytes('dpt'), TxnField.config_asset_total: self.total_supply, TxnField.config_asset_decimals: Int(3), TxnField.config_asset_manager: self.address, TxnField.config_asset_reserve: self.address, TxnField.fee: Int(0)})
itxn_submit                                                        //
itxn CreatedAssetID                                                //                              568     InnerTxn.created_asset_id()
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()
                                                                   //
// compute_ratio
computeratio_15:
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
bytec_0 // "a"                                                     //                              72      Bytes('a')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
asset_holding_get AssetBalance                                     //    examples/amm/amm.py       574     AssetHolding.balance(self.address, self.asset_a)
store 55                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 54                                                           //
global CurrentApplicationAddress                                   //    examples/amm/amm.py       28      from beaker import (
bytec_1 // "b"                                                     //                              78      Bytes('b')
app_global_get                                                     //    examples/amm/amm_test.py  98      ConstantProductAMM()
asset_holding_get AssetBalance                                     //    examples/amm/amm.py       578     AssetHolding.balance(self.address, self.asset_b)
store 57                                                           //    examples/amm/amm_test.py  98      ConstantProductAMM()
store 56                                                           //
load 55                                                            //    examples/amm/amm.py       583     bal_a.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 57                                                            //    examples/amm/amm.py       584     bal_b.hasValue()
// missing required balances                                       //    examples/amm/amm_test.py  98      ConstantProductAMM()
assert                                                             //
load 54                                                            //    examples/amm/amm.py       587     bal_a.value()
intc_2 // 1000                                                     //                              104     Int(_scale)
mulw                                                               //                              587     WideRatio([bal_a.value(), self.scale], [bal_b.value()])
intc_0 // 0                                                        //
load 56                                                            //                                      bal_b.value()
divmodw                                                            //                                      WideRatio([bal_a.value(), self.scale], [bal_b.value()])
pop                                                                //
pop                                                                //
swap                                                               //
!                                                                  //
assert                                                             //
retsub                                                             //    examples/amm/amm_test.py  98      ConstantProductAMM()