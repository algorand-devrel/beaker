#pragma version 8
intcblock 0 1 1000 4 10000000000
bytecblock 0x61 0x62 0x70 0x67 0x72
txn NumAppArgs
intc_0 // 0
==
bnz main_l12
txna ApplicationArgs 0
pushbytes 0x08a956f7 // "set_governor(account)void"
==
bnz main_l11
txna ApplicationArgs 0
pushbytes 0x6b59d965 // "bootstrap(pay,asset,asset)uint64"
==
bnz main_l10
txna ApplicationArgs 0
pushbytes 0x5cbf1e2d // "mint(axfer,axfer,asset,asset,asset)void"
==
bnz main_l9
txna ApplicationArgs 0
pushbytes 0x1436c2ac // "burn(axfer,asset,asset,asset)void"
==
bnz main_l8
txna ApplicationArgs 0
pushbytes 0x4a88e055 // "swap(axfer,asset,asset)void"
==
bnz main_l7
err
main_l7:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 51
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 52
txn GroupIndex
intc_1 // 1
-
store 50
load 50
gtxns TypeEnum
intc_3 // axfer
==
assert
load 50
load 51
load 52
callsub swap_15
intc_1 // 1
return
main_l8:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 47
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 48
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 49
txn GroupIndex
intc_1 // 1
-
store 46
load 46
gtxns TypeEnum
intc_3 // axfer
==
assert
load 46
load 47
load 48
load 49
callsub burn_14
intc_1 // 1
return
main_l9:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 43
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 44
txna ApplicationArgs 3
intc_0 // 0
getbyte
store 45
txn GroupIndex
pushint 2 // 2
-
store 41
load 41
gtxns TypeEnum
intc_3 // axfer
==
assert
txn GroupIndex
intc_1 // 1
-
store 42
load 42
gtxns TypeEnum
intc_3 // axfer
==
assert
load 41
load 42
load 43
load 44
load 45
callsub mint_13
intc_1 // 1
return
main_l10:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
store 38
txna ApplicationArgs 2
intc_0 // 0
getbyte
store 39
txn GroupIndex
intc_1 // 1
-
store 37
load 37
gtxns TypeEnum
intc_1 // pay
==
assert
load 37
load 38
load 39
callsub bootstrap_12
store 40
pushbytes 0x151f7c75 // 0x151f7c75
load 40
itob
concat
log
intc_1 // 1
return
main_l11:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub setgovernor_10
intc_1 // 1
return
main_l12:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l14
err
main_l14:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_8
intc_1 // 1
return

// tokens_to_mint
tokenstomint_0:
proto 5 1
frame_dig -2
intc_2 // 1000
mulw
intc_0 // 0
frame_dig -4
divmodw
pop
pop
swap
!
assert
store 4
frame_dig -1
intc_2 // 1000
mulw
intc_0 // 0
frame_dig -3
divmodw
pop
pop
swap
!
assert
store 5
load 4
load 5
<
bnz tokenstomint_0_l2
load 5
b tokenstomint_0_l3
tokenstomint_0_l2:
load 4
tokenstomint_0_l3:
frame_dig -5
mulw
intc_0 // 0
intc_2 // 1000
divmodw
pop
pop
swap
!
assert
retsub

// tokens_to_mint_initial
tokenstomintinitial_1:
proto 2 1
frame_dig -2
frame_dig -1
*
sqrt
intc_2 // 1000
-
retsub

// tokens_to_burn
tokenstoburn_2:
proto 3 1
frame_dig -2
frame_dig -1
mulw
intc_0 // 0
frame_dig -3
divmodw
pop
pop
swap
!
assert
retsub

// tokens_to_swap
tokenstoswap_3:
proto 3 1
frame_dig -3
intc_2 // 1000
pushint 5 // 5
-
mulw
frame_dig -1
uncover 2
dig 1
*
cover 2
mulw
cover 2
+
swap
intc_0 // 0
frame_dig -2
intc_2 // 1000
*
frame_dig -3
intc_2 // 1000
pushint 5 // 5
-
*
+
divmodw
pop
pop
swap
!
assert
retsub

// do_axfer
doaxfer_4:
proto 3 0
itxn_begin
intc_3 // axfer
itxn_field TypeEnum
frame_dig -2
itxn_field XferAsset
frame_dig -1
itxn_field AssetAmount
frame_dig -3
itxn_field AssetReceiver
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// do_opt_in
dooptin_5:
proto 1 0
global CurrentApplicationAddress
frame_dig -1
intc_0 // 0
callsub doaxfer_4
retsub

// do_create_pool_token
docreatepooltoken_6:
proto 2 1
frame_dig -2
asset_params_get AssetUnitName
store 1
store 0
frame_dig -1
asset_params_get AssetUnitName
store 3
store 2
load 1
assert
load 3
assert
itxn_begin
pushint 3 // acfg
itxn_field TypeEnum
pushbytes 0x4450542d // "DPT-"
load 0
concat
pushbytes 0x2d // "-"
concat
load 2
concat
itxn_field ConfigAssetName
pushbytes 0x647074 // "dpt"
itxn_field ConfigAssetUnitName
intc 4 // 10000000000
itxn_field ConfigAssetTotal
pushint 3 // 3
itxn_field ConfigAssetDecimals
global CurrentApplicationAddress
itxn_field ConfigAssetManager
global CurrentApplicationAddress
itxn_field ConfigAssetReserve
intc_0 // 0
itxn_field Fee
itxn_submit
itxn CreatedAssetID
retsub

// compute_ratio
computeratio_7:
proto 0 1
global CurrentApplicationAddress
bytec_0 // "a"
app_global_get
asset_holding_get AssetBalance
store 7
store 6
global CurrentApplicationAddress
bytec_1 // "b"
app_global_get
asset_holding_get AssetBalance
store 9
store 8
load 7
assert
load 9
assert
load 6
intc_2 // 1000
mulw
intc_0 // 0
load 8
divmodw
pop
pop
swap
!
assert
retsub

// create
create_8:
proto 0 0
bytec_3 // "g"
global CreatorAddress
app_global_put
bytec 4 // "r"
intc_0 // 0
app_global_put
retsub

// auth_only
authonly_9:
proto 1 1
frame_dig -1
bytec_3 // "g"
app_global_get
==
retsub

// set_governor
setgovernor_10:
proto 1 0
txn Sender
callsub authonly_9
// unauthorized
assert
bytec_3 // "g"
frame_dig -1
txnas Accounts
app_global_put
retsub

// auth_only
authonly_11:
proto 1 1
frame_dig -1
bytec_3 // "g"
app_global_get
==
retsub

// bootstrap
bootstrap_12:
proto 3 1
intc_0 // 0
txn Sender
callsub authonly_11
// unauthorized
assert
global GroupSize
pushint 2 // 2
==
// group size not 2
assert
frame_dig -3
gtxns Receiver
global CurrentApplicationAddress
==
// receiver not app address
assert
frame_dig -3
gtxns Amount
pushint 300000 // 300000
>=
// amount minimum not met
assert
frame_dig -2
txnas Assets
frame_dig -1
txnas Assets
<
// asset a or asset b incorrect
assert
intc_0 // 0
bytec_0 // "a"
app_global_get_ex
store 11
store 10
load 11
!
assert
bytec_0 // "a"
frame_dig -2
txnas Assets
app_global_put
intc_0 // 0
bytec_1 // "b"
app_global_get_ex
store 13
store 12
load 13
!
assert
bytec_1 // "b"
frame_dig -1
txnas Assets
app_global_put
intc_0 // 0
bytec_2 // "p"
app_global_get_ex
store 15
store 14
load 15
!
assert
bytec_2 // "p"
bytec_0 // "a"
app_global_get
bytec_1 // "b"
app_global_get
callsub docreatepooltoken_6
app_global_put
bytec_0 // "a"
app_global_get
callsub dooptin_5
bytec_1 // "b"
app_global_get
callsub dooptin_5
bytec_2 // "p"
app_global_get
frame_bury 0
retsub

// mint
mint_13:
proto 5 0
frame_dig -2
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
frame_dig -1
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
frame_dig -3
txnas Assets
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
frame_dig -5
gtxns Sender
txn Sender
==
frame_dig -4
gtxns Sender
txn Sender
==
&&
// invalid sender
assert
frame_dig -5
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
frame_dig -5
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
frame_dig -5
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
frame_dig -4
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
frame_dig -4
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
frame_dig -4
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
global CurrentApplicationAddress
frame_dig -3
asset_holding_get AssetBalance
store 17
store 16
global CurrentApplicationAddress
frame_dig -2
asset_holding_get AssetBalance
store 19
store 18
global CurrentApplicationAddress
frame_dig -1
asset_holding_get AssetBalance
store 21
store 20
load 17
assert
load 19
assert
load 21
assert
load 18
frame_dig -5
gtxns AssetAmount
==
load 20
frame_dig -4
gtxns AssetAmount
==
&&
bnz mint_13_l2
intc 4 // 10000000000
load 16
-
load 18
frame_dig -5
gtxns AssetAmount
-
load 20
frame_dig -4
gtxns AssetAmount
-
frame_dig -5
gtxns AssetAmount
frame_dig -4
gtxns AssetAmount
callsub tokenstomint_0
b mint_13_l3
mint_13_l2:
frame_dig -5
gtxns AssetAmount
frame_dig -4
gtxns AssetAmount
callsub tokenstomintinitial_1
mint_13_l3:
store 22
load 22
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
bytec_2 // "p"
app_global_get
load 22
callsub doaxfer_4
bytec 4 // "r"
callsub computeratio_7
app_global_put
retsub

// burn
burn_14:
proto 4 0
frame_dig -3
txnas Assets
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
frame_dig -2
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
frame_dig -1
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
frame_dig -4
gtxns AssetReceiver
global CurrentApplicationAddress
==
// receiver not app address
assert
frame_dig -4
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
frame_dig -4
gtxns XferAsset
bytec_2 // "p"
app_global_get
==
// asset pool incorrect
assert
frame_dig -4
gtxns Sender
txn Sender
==
// invalid sender
assert
global CurrentApplicationAddress
frame_dig -3
asset_holding_get AssetBalance
store 24
store 23
global CurrentApplicationAddress
frame_dig -2
asset_holding_get AssetBalance
store 26
store 25
global CurrentApplicationAddress
frame_dig -1
asset_holding_get AssetBalance
store 28
store 27
load 24
assert
load 26
assert
load 28
assert
intc 4 // 10000000000
load 23
frame_dig -4
gtxns AssetAmount
-
-
store 29
load 29
load 25
frame_dig -4
gtxns AssetAmount
callsub tokenstoburn_2
store 30
load 29
load 27
frame_dig -4
gtxns AssetAmount
callsub tokenstoburn_2
store 31
txn Sender
bytec_0 // "a"
app_global_get
load 30
callsub doaxfer_4
txn Sender
bytec_1 // "b"
app_global_get
load 31
callsub doaxfer_4
bytec 4 // "r"
callsub computeratio_7
app_global_put
retsub

// swap
swap_15:
proto 3 0
frame_dig -2
txnas Assets
bytec_0 // "a"
app_global_get
==
// asset a incorrect
assert
frame_dig -1
txnas Assets
bytec_1 // "b"
app_global_get
==
// asset b incorrect
assert
frame_dig -3
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
frame_dig -3
gtxns XferAsset
bytec_1 // "b"
app_global_get
==
||
// asset a or asset b incorrect
assert
frame_dig -3
gtxns AssetAmount
intc_0 // 0
>
// amount minimum not met
assert
frame_dig -3
gtxns Sender
txn Sender
==
// invalid sender
assert
global CurrentApplicationAddress
frame_dig -3
gtxns XferAsset
asset_holding_get AssetBalance
store 33
store 32
global CurrentApplicationAddress
frame_dig -3
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_15_l5
bytec_0 // "a"
app_global_get
swap_15_l2:
asset_holding_get AssetBalance
store 35
store 34
load 33
assert
load 35
assert
frame_dig -3
gtxns AssetAmount
load 32
frame_dig -3
gtxns AssetAmount
-
load 34
callsub tokenstoswap_3
store 36
load 36
intc_0 // 0
>
// outgoing amount too low
assert
txn Sender
frame_dig -3
gtxns XferAsset
bytec_0 // "a"
app_global_get
==
bnz swap_15_l4
bytec_0 // "a"
app_global_get
b swap_15_l6
swap_15_l4:
bytec_1 // "b"
app_global_get
b swap_15_l6
swap_15_l5:
bytec_1 // "b"
app_global_get
b swap_15_l2
swap_15_l6:
load 36
callsub doaxfer_4
bytec 4 // "r"
callsub computeratio_7
app_global_put
retsub